Timer unit: 1e-09 s

Total time: 0 s
File: /home/clark/anaconda3/envs/treeple1/lib/python3.10/site-packages/treeple/tree/_classes.py
Function: _build_tree at line 887

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   887                                               def _build_tree(
   888                                                   self,
   889                                                   X,
   890                                                   y,
   891                                                   sample_weight,
   892                                                   missing_values_in_feature_mask,
   893                                                   min_samples_leaf,
   894                                                   min_weight_leaf,
   895                                                   max_leaf_nodes,
   896                                                   min_samples_split,
   897                                                   max_depth,
   898                                                   random_state,
   899                                               ):
   900                                                   """Build the actual tree.
   901                                           
   902                                                   Parameters
   903                                                   ----------
   904                                                   X : {array-like, sparse matrix} of shape (n_samples, n_features)
   905                                                       The training input samples. Internally, it will be converted to
   906                                                       ``dtype=np.float32`` and if a sparse matrix is provided
   907                                                       to a sparse ``csc_matrix``.
   908                                           
   909                                                   y : array-like of shape (n_samples,) or (n_samples, n_outputs)
   910                                                       The target values (class labels) as integers or strings.
   911                                           
   912                                                   sample_weight : array-like of shape (n_samples,), default=None
   913                                                       Sample weights. If None, then samples are equally weighted. Splits
   914                                                       that would create child nodes with net zero or negative weight are
   915                                                       ignored while searching for a split in each node. Splits are also
   916                                                       ignored if they would result in any single class carrying a
   917                                                       negative weight in either child node.
   918                                           
   919                                                   min_samples_leaf : int or float
   920                                                       The minimum number of samples required to be at a leaf node.
   921                                           
   922                                                   min_weight_leaf : float, default=0.0
   923                                                      The minimum weighted fraction of the sum total of weights.
   924                                           
   925                                                   max_leaf_nodes : int, default=None
   926                                                       Grow a tree with ``max_leaf_nodes`` in best-first fashion.
   927                                           
   928                                                   min_samples_split : int or float, default=2
   929                                                       The minimum number of samples required to split an internal node.
   930                                           
   931                                                   max_depth : int, default=None
   932                                                       The maximum depth of the tree. If None, then nodes are expanded until
   933                                                       all leaves are pure or until all leaves contain less than
   934                                                       min_samples_split samples.
   935                                           
   936                                                   random_state : int, RandomState instance or None, default=None
   937                                                       Controls the randomness of the estimator.
   938                                                   """
   939                                                   ########################################
   940                                                   # Clark:
   941                                                   start=time.perf_counter()
   942                                                   ########################################
   943                                                   monotonic_cst = None
   944                                                   self.monotonic_cst_ = monotonic_cst
   945                                                   _, n_features = X.shape
   946                                           
   947                                                   if self.feature_combinations is None:
   948                                                       self.feature_combinations_ = min(n_features, 1.5)
   949                                                   elif self.feature_combinations > n_features:
   950                                                       raise RuntimeError(
   951                                                           f"Feature combinations {self.feature_combinations} should not be "
   952                                                           f"greater than the possible number of features {n_features}"
   953                                                       )
   954                                                   else:
   955                                                       self.feature_combinations_ = self.feature_combinations
   956                                           
   957                                                   # Build tree
   958                                                   criterion = self.criterion
   959                                                   if not isinstance(criterion, BaseCriterion):
   960                                                       criterion = CRITERIA_CLF[self.criterion](self.n_outputs_, self.n_classes_)
   961                                                   else:
   962                                                       # Make a deepcopy in case the criterion has mutable attributes that
   963                                                       # might be shared and modified concurrently during parallel fitting
   964                                                       criterion = copy.deepcopy(criterion)
   965                                           
   966                                                   splitter = self.splitter
   967                                                   if issparse(X):
   968                                                       raise ValueError(
   969                                                           "Sparse input is not supported for oblique trees. "
   970                                                           "Please convert your data to a dense array."
   971                                                       )
   972                                                   else:
   973                                                       OBLIQUE_SPLITTERS = OBLIQUE_DENSE_SPLITTERS
   974                                           
   975                                                   if not isinstance(self.splitter, ObliqueSplitter):
   976                                                       splitter = OBLIQUE_SPLITTERS[self.splitter](
   977                                                           criterion,
   978                                                           self.max_features_,
   979                                                           min_samples_leaf,
   980                                                           min_weight_leaf,
   981                                                           random_state,
   982                                                           monotonic_cst,
   983                                                           self.feature_combinations_,
   984                                                       )
   985                                           
   986                                                   self.tree_ = ObliqueTree(self.n_features_in_, self.n_classes_, self.n_outputs_)
   987                                                   ###################################################
   988                                                   # Clark:
   989                                                   print("------------------------------------------------------------")
   990                                                   print("Time to initialize Trees", time.perf_counter() - start)
   991                                                   ###################################################
   992                                           
   993                                           
   994                                                   # Use BestFirst if max_leaf_nodes given; use DepthFirst otherwise
   995                                                   if max_leaf_nodes < 0:
   996                                                       builder = DepthFirstTreeBuilder(
   997                                                           splitter,
   998                                                           min_samples_split,
   999                                                           min_samples_leaf,
  1000                                                           min_weight_leaf,
  1001                                                           max_depth,
  1002                                                           self.min_impurity_decrease,
  1003                                                       )
  1004                                                   else:
  1005                                                       builder = BestFirstTreeBuilder(
  1006                                                           splitter,
  1007                                                           min_samples_split,
  1008                                                           min_samples_leaf,
  1009                                                           min_weight_leaf,
  1010                                                           max_depth,
  1011                                                           max_leaf_nodes,
  1012                                                           self.min_impurity_decrease,
  1013                                                       )
  1014                                           
  1015                                                   ########################################
  1016                                                   # Clark:
  1017                                                   start_build=time.perf_counter()
  1018                                                   ########################################
  1019                                                   builder.build(self.tree_, X, y, sample_weight, None)
  1020                                                   ###################################################
  1021                                                   # Clark:
  1022                                                   print("Time taken for builder.build", time.perf_counter() - start_build)
  1023                                                   ###################################################
  1024                                           
  1025                                           
  1026                                                   if self.n_outputs_ == 1:
  1027                                                       self.n_classes_ = self.n_classes_[0]
  1028                                                       self.classes_ = self.classes_[0]
  1029                                                   ###################################################
  1030                                                   # Clark:
  1031                                                   print("_build_tree total time spent: ", time.perf_counter() - start)
  1032                                                   ###################################################
  1033                                           
  1034                                                   return self

